LINK - https://leetcode.com/problems/range-sum-query-2d-immutable/

class NumMatrix {
public:
    // const int p = 200;
    int ans[201][201]={0};
    NumMatrix(vector<vector<int>>& matrix) {
        int n= matrix.size();
        int m = matrix[0].size();
        ans[0][0]=matrix[0][0];
        for(int i =1;i<m;i++)
        {
            ans[0][i] +=matrix[0][i]+ans[0][i-1];
        }
          for(int i =1;i<n;i++)
        {
            ans[i][0] +=matrix[i][0]+ans[i-1][0];
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                ans[i][j] = ans[i-1][j]+ans[i][j-1]-ans[i-1][j-1] + matrix[i][j];
            }
        }
        // cout<<endl;
        // for(int i=0;i<n;i++)
        // {
        //     for(int j=0;j<m;j++)
        //     {
        //         cout<<ans[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
       int res = ans[row2][col2];
        int sub = (col1!=0 ? ans[row2][col1-1]:0) + (row1!=0 ? ans[row1-1][col2]:0)
            -((row1!=0 && col1!=0) ? ans[row1-1][col1-1] : 0);
        return res-sub;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
 
 TC - O(N*M)
 SC - 0(N*M)
