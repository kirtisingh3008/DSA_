LINK - https://leetcode.com/problems/product-of-array-except-self/
APPROACH -1 USING "/" OPERATOR WHICH WAS STRICTLY MENTIONED NOT TO USE IN A PROBLEM WITH O(1) SPACE COMPLEXITY
vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        int cnt=0;
        int prod=1;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                cnt++;
            }
            else 
            {
                prod *=nums[i];
            }
            
        }
        vector<int> ans;
        for(int i=0;i<n;i++)
        {
            if(cnt>1)
            {
                ans.push_back(0);
            }
            else if(cnt==1)
            {
                if(nums[i]==0)
                {
                    ans.push_back(prod);
                }
                else
                {
                    ans.push_back(0);
                }
            }
            else
            {
                ans.push_back(prod/nums[i]);
            }
        }
        return ans;
        
    }
    APPROACH -2
    WITHOUT OPERATOR BUT A O(N) SPACE COMPLEXITY
    class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> ans;
        int n=nums.size();
        vector<int> prefix;
        vector<int> suffix;
        prefix.push_back(nums[0]);
        int sum = nums[0];
        for(int i=1;i<n;i++)
        {
            sum *=nums[i];
            prefix.push_back(sum);
        }
        /*for(int i=0;i<n;i++)
        {
            cout<<prefix[i]<<" ";
        }
        cout<<endl;
        */
        suffix.push_back(nums[n-1]);
        int sum1 =suffix[0];
        for(int i=n-2;i>=0;i--)
        {
            sum1 *=nums[i];
            suffix.push_back(sum1);
        }
        reverse(suffix.begin(),suffix.end());
      /*  for(int i=0;i<n;i++)
        {
            cout<<suffix[i]<<" ";
        }
        cout<<endl;
        */
        ans.push_back(suffix[1]);
        for(int i=1;i<n-1;i++)
        {
            ans.push_back(prefix[i-1]*suffix[i+1]);
        }
        ans.push_back(prefix[n-2]);
        
        return ans;
        
    }
};
