Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

class Solution {
public:
    vector<char> keypad[10] =
    {
        {}, {},        // 0 and 1 digit don't have any characters associated
        { 'a', 'b', 'c' },
        { 'd', 'e', 'f' },
        { 'g', 'h', 'i' },
        { 'j', 'k', 'l' },
        { 'm', 'n', 'o' },
        { 'p', 'q', 'r', 's'},
        { 't', 'u', 'v' },
        { 'w', 'x', 'y', 'z'}
    };
    vector<string> ans;
    void helper(string digits, string res, int index, int n)
    {
        // base case
        if(index==n)
        {
            ans.push_back(res);
            return;
        }
        // getting digit one by one
        int curr_digit = int(digits[index]-'0');
        // no of alphabets present in the corresponding curr_digit
        int len = keypad[curr_digit].size();
        for(int i=0;i<len;i++)
        {
            helper(digits,res+keypad[curr_digit][i],index+1,n);
        }
    }
    vector<string> letterCombinations(string digits) {
        // base case
        // if the string is empty
        
        int n =digits.size();
        if(n==0)
            return ans;
        // input string , curr_string which is empty , index from which we start
        // and length of the string
        helper(digits,"",0,n);
        return ans;
    }
    };
