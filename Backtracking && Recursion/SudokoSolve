#include<bits/stdc++.h>
#define vvi vector<vector<int>>
#define vvc vector<vector<char>> 
#define ll long long int
using namespace std;
bool issafe(vvi grid, int row, int col, int num)
{
    int n=grid.size();
    int m=grid[0].size();
    for(int i=0;i<=8;i++)
    {
        if(grid[row][i]==num)
        {
            return false;
        }
    }
     for(int i=0;i<=8;i++)
    {
        if(grid[i][col]==num)
        {
            return false;
        }
    }
    int start_row=row-row%3;
    int start_col=col-col%3;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            if(grid[i+start_row][j+start_col]==num)
            {
                return false;
            }
        }
    }
    return true;



}
bool helper(vvi &grid, int row, int col)
{
    int n=grid.size();
    int m=grid[0].size();
    if(row==n-1 && col==m)
    {
            return true;
    }
    if(col==m)
    {  
        row++;
       col=0;
    }
    if(grid[row][col]>0)
    {
        return helper(grid,row,col+1);
    }
    for(int num=1;num<=9;num++)
    {
        if(issafe(grid,row,col,num)==true)
        {
            grid[row][col]=num;
            
                grid[row][col]=num;
                if(helper(grid,row,col+1))
                return true;

        }
            grid[row][col]=0;
        
    }
    return false;
}
void solve(vector<vector<int>> grid,int n,int m)
{
    if(helper(grid,0,0)==true)
    {
        for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
        
    }
    else
    return;
}
int main()
{
    int n,m;
    cin>>n>>m;
    vvi grid(n,vector<int>(m,0));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>grid[i][j];
        }
    }
     solve(grid,n,m);
     
    
  
    return 0;
}
TC-0(9^N*N)
sc-0(N*N)
