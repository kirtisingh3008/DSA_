// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


 // } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    vector<string> ans;
    void helper(int open, int close,string res)
    {
        if(open <0 || close <0 || close <open)
          return;
        if(open==0 && close==0)
        {
            ans.push_back(res);
            return;
        }
        helper(open-1,close,res+'(');
        helper(open,close-1,res+')');
        
        
    }
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        helper(n,n,"");
        return ans;
    }
};

// { Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 
  // } Driver Code Ends
  TIME COMPLEXITY -O(2N * N).
  SPACE COMPLEXITY - O(2*N*X), X = Number of valid Parenthesis.
