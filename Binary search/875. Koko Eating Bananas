LINK - https://leetcode.com/problems/koko-eating-bananas/

class Solution {
public:
    bool helper(vector<int> &piles, long long int mid, int h)
    {
        int cnt =0;
        for(int i=0;i<piles.size();i++)
        {
            cnt += piles[i]/mid;
            if(piles[i]%mid !=0)
                cnt++;
        }
        return cnt <= h;
    }
    int solve(vector<int>&piles, int n,int h)
    {
        long long int low =1;
        long long int high = piles[n-1];
        int ans =0;
        while(high >= low)
        {
            long long int mid = (low+high)>>1;
            if(helper(piles,mid,h))
            {
                ans =mid;
                high =mid-1; // can we get more smaller ans
            }
            else 
            {
                low = mid+1; // increase the size of k
            }
        }
        return ans;
        
    }
    int minEatingSpeed(vector<int>& piles, int h) {
       if(piles.size() > h)
       {
           return -1;
       }
        sort(piles.begin(),piles.end());
        int ans = solve(piles,piles.size(),h);
        return ans;
        
    }
};

TC - O(N*LOG*M)
SC - O(1)
