LINK - https://leetcode.com/problems/unique-paths-ii/

class Solution {
public:
    int dp[101][101];
    int solver(vector<vector<int>> grid, vector<vector<bool>>& visited, int row, int                    col)
    {
        if(row <0 || col < 0 || row >=grid.size() || col >=grid[0].size() || 
           grid[row][col] == 1)
        {
            return 0;
        }
        if(row == grid.size()-1 && col == grid[0].size()-1)
        {
            return 1;
        }
        if(dp[row][col]!=-1)
        {
            return dp[row][col];
        }
        visited[row][col]=true;
        int option1 = solver(grid,visited,row+1,col);
        int option2 = solver(grid,visited,row,col+1);
        visited[row][col]=false;
        return dp[row][col]=option1+option2;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> visited(n,vector<bool>(m,false));
        memset(dp,-1,sizeof(dp));
        return solver(grid,visited,0,0);
    }
};

TC - O(pow(2,n*m);
SC - O(N*M)
