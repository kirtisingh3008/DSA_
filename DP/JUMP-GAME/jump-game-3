LINK -https://leetcode.com/problems/jump-game-iii/
class Solution {
public:
    bool canReach(vector<int>& nums, int start) 
    {
         if(nums[start]==0)
             return true;
        int n=nums.size();
        // how about i try all the possible options and than see
        // lets do bfs
        queue<int> q;
        vector<bool>visited(n,false);
        q.push(start);
        visited[start]=true;// visited;
        while(q.empty()==false)
        {
            int x = q.front();
           //cout<<x<<endl;
            q.pop();
            if(nums[x]==0)
                return true;
            if(x+nums[x] <= n-1 && visited[x+nums[x]]==false)
            {
                q.push(x+nums[x]);
                visited[x+nums[x]]=true;
            }
            if(x-nums[x] >=0 && visited[x-nums[x]]==false)
            {
                q.push(x-nums[x]);
                visited[x-nums[x]]=true;
            }
        }
        return false;
    }
};
TC - O(N) --> BFS traversal
SC - 0(N) --> visited and queue
