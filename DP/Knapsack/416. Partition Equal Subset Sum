LINK - https://leetcode.com/problems/partition-equal-subset-sum/

class Solution {
public:
    bool check(vector<int> &nums, int sum)
    {
        int n=nums.size();
        bool dp[n+1][sum+1];
        // if n=0;
        for(int i=0;i<=sum;i++)
        {
            dp[0][i]=false;
        }
        // if sum=0;
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=true;
        }
        dp[0][0]=true;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                if(j-nums[i-1] >=0)
                {
                    // i can pick it or not
                    dp[i][j] = (dp[i-1][j-nums[i-1]] || dp[i-1][j]);
                }
                else 
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][sum];
    }
    bool canPartition(vector<int>& nums) {
        // step -1 get the sum of all elements 
        // if off then false
        //else check if sum/2 subset can be formed or not
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        if(sum%2==1)
            return false;
        else 
        {
            if(check(nums,sum/2)==true)
                return true;
        }
        return false;
    }
};
