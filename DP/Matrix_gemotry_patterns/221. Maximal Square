LINK - https://leetcode.com/problems/maximal-square/

class Solution {
public:
    // LETS HAVE A LOOK AT THE LOGIC 
    // Fisrt we need a sqauare of all ones
    // if there is no 1 at all it would be 0
    // if any single one also exsit than it could be part f a square
    int maximalSquare(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int dp[n][m];
        memset(dp,0,sizeof(dp));
        // lets fil the first row
        for(int i=0;i<m;i++)
        {
            if(matrix[0][i]=='1')
            dp[0][i]=1;
            
        }
        // lets fill the first column
        for(int i=0;i<n;i++)
        {
            if(matrix[i][0]=='1')
                dp[i][0]=1;
        }
        // now lets calculate for the rest
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                if(matrix[i][j]=='1')
                {
                    dp[i][j] =min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]))+1;
                }
                else 
                    dp[i][j]=0;
            }
        }
        int maxi =0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(maxi < dp[i][j])
                    maxi=dp[i][j];
            }
        }
        return maxi*maxi;
        
    }
};
TC - O(n*m)
sc -0(n*m) // dp array
