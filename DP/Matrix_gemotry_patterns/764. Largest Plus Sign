LINK - https://leetcode.com/problems/largest-plus-sign/

class Solution {
public:
    //STEPS-1
    //1. LETS CREATE A MATRIX FIRST
    //2. I want to try dfs on all the four parts with diffrent left, right, up,
    // down count
    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {
        vector<vector<int>> dp(n,vector<int>(n,1));
        int n1=mines.size();
        for(int i=0;i<n1;i++)
        {
            int x =mines[i][0];
            int y=mines[i][1];
            dp[x][y]=0;
        }
       
        // lets try brute force first
        // lets create a matrix for up, down, left and right
        int ans=0;
        vector<vector<int>> up(n,vector<int>(n,0));
        vector<vector<int>> down(n,vector<int>(n,0));
        vector<vector<int>> left(n,vector<int>(n,0));
        vector<vector<int>> right(n,vector<int>(n,0));
      
        // lets see for up matrix
        bool seen=false;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(dp[i][j]==1)
                {
                    seen=true;
                    if(i==0)
                        up[0][j]=1;
                    else 
                        up[i][j]=up[i-1][j]+1;
                }
            }
        }
        // left
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(dp[i][j]==1)
                {
                    seen=true;
                    if(j==0)
                        left[i][0]=1;
                    else 
                        left[i][j]=left[i][j-1]+1;
                }
            }
        }
        // right
        for(int i=0;i<n;i++)
        {
            for(int j=n-1;j>=0;j--)
            {
                if(dp[i][j]==1)
                {
                    seen=true;
                    if(j==n-1)
                        right[i][n-1]=1;
                    else 
                        right[i][j]=right[i][j+1]+1;
                }
            }
        }
        // down
        for(int i=n-1;i>=0;i--)
        {
            for(int j=0;j<n;j++)
            {
                if(dp[i][j]==1)
                {
                    seen=true;
                    if(i==n-1)
                        down[n-1][j]=1;
                    else 
                        down[i][j]=down[i+1][j]+1;
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                ans =max(ans, min(up[i][j],
                                  min(down[i][j],
                                  min(left[i][j],right[i][j]))));
            }
        }
        if(ans==0 || seen==false)
            return 0;
       
        return ans;
    }
};
TC - O(N*M)*6 // have a look we are doing it six times
SC - O(N*M)*5 // for dp array and up , down, left and right 2 dimensional array
