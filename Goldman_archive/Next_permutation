Given a positive integer n and a string s consisting only of letters D or I, you have to find any permutation of first n positive integer that satisfy the given input string.
D means the next number is smaller, while I means the next number is greater.

Input 1:

n = 3

s = ID

Return: [1, 3, 2]
vector<int> Solution::findPerm(const string A, int B) {
    int n=A.size();
    int l=1;
    vector<int> ans;
    int r=B;
    for(int i=0;i<n;i++)
    {
        switch(A[i])
        {
            case 'I': ans.push_back(l++);
                     break;
            case 'D':
                    ans.push_back(r--);
                    break;
        }
    }
    // why do we need this loop right?
    // because what about the left numbers which didnt be part of the answer.
    switch(A[B-2])
    {
         case 'I': ans.push_back(l++);
                     break;
            case 'D':
                    ans.push_back(r--);
                    break;
    }
    return ans;
}
TC-0(N)
SC-0(N)
