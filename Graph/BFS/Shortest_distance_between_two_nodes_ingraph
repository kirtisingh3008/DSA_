#include <bits/stdc++.h>
using namespace std;

int solve(vector<int> adj[],int a, int b, int n)
{
  vector<int> distance(n,0);
  vector<bool> visited(n,false);
  queue<int> q;
  q.push(a);
  distance[a]=0;
  visited[a]=true;
  while(q.empty()==false)
  {
    int x =q.front();
    q.pop();
    for(int i=0;i<adj[x].size();i++)
    {
      if(visited[adj[x][i]]==true)
      continue;
      distance[adj[x][i]]=distance[x]+1;
      q.push(adj[x][i]);
      visited[adj[x][i]]=true;
    }
  }
  return distance[b];
}
int main()
{
  //write your code here
  int t;
  cin>>t;
  while(t--)
  {
    int n,m;
    cin>>n>>m;
    vector<int> adj[n];
    for(int i=0;i<m;i++)
    {
      int x,y;
      
      cin>>x>>y;
      adj[x].push_back(y);
      adj[y].push_back(x);
    }
    int x,y;
    cin>>x>>y;
    cout<<solve(adj,x,y,n)<<endl;
  }
  return 0;
}
// TC -0(N) // NO OF NODES
// SC -0(N)--> DIST VECTOR + 0(N) --> VISITED + 0(MAX NO OF NODES IN A QUEUE)--> 0(N)
