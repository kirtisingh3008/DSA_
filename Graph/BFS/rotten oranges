#include<bits/stdc++.h>
#define ll long long int
#define maxn 100086
using namespace std;
struct k
{
    int i1;
    int j1;
};
const int d[5] ={1,0,-1,0,1};
int solve(vector<vector<int>> grid, int n , int m)
{
    int count =0;
    queue<k> q;
    int time =-1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
          if(grid[i][j]==2)
          {
             q.push({i,j});
          }
          else if(grid[i][j]==1)
          {
              count++;
          }
        }
    }  
    // one condition if already all the oranges are rotten the
    if(count==0)
    {
        return 0;
    }
    while(q.empty()==false)
    {
        int capacity =q.size();
        time++;
        while(capacity--)
        {
            k curr =q.front();
            int x = curr.i1;
            int y =curr.j1;
            q.pop();
            for(int i=0;i<4;i++)
            {
               if(x+d[i] >=0 && x+d[i] < n && y+d[i+1] >=0 && y+d[i+1] <m && grid[x+d[i]][y+d[i+1]]==1)
               {
                   count--;
                   grid[x+d[i]][y+d[i+1]]=2;
                   q.push({x+d[i],y+d[i+1]});
               }
            }
        }
        
    }
    if(count==0)
    {
        return time;
    }
    return -1;
}
int main()
{
    int n,m;
    cin>>n>>m;
    vector<vector<int>> grid(n,vector<int>(m,0));
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cin>>grid[i][j];
        }
    }
    cout<<solve(grid,n,m)<<endl;

    return 0;
}
SC-0(N) --> queue datastructure
TC -O(N*M*COUNTof(1)) 
