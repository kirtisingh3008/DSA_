LINK - https://leetcode.com/problems/min-cost-to-connect-all-points/

class Solution {
public:
    // logic how about we convert these points into single node in sequence
    // and store the cost to reach a to any n node as the manhatn distance of it
    // now i want the minimum possible spend to reach every node 
    // NOTE - YOU DO HAVE TO REACH EVERY NODE(THINK OF MST)
    // GREEDILY LETS JUST PICK THOSE POINTS WITH SHORTEST DISTANCE 
    // AND THAN APPLY SIMPLE KRUSKAL ALGORITHM
    
    int get_parent(int v, int *parent)
    {
        if(parent[v]==v)
            return v;
        return get_parent(parent[v],parent);
        
    }
    int helper(vector<pair<int,pair<int,int>>> a, int v)
    {
        sort(a.begin(), a.end());
        int sum=0;
        int *parent = new int[v];
        for(int i=0;i<v;i++)
        {
            parent[i]=i;
        }
        int count =0;
        int i=0;
        while(count < (v-1))
        {
            int src = get_parent(a[i].second.first,parent);
            int dest = get_parent(a[i].second.second,parent);
            int cost = a[i].first;
            if(src != dest)
            {
                sum += cost;
                parent[src] = dest;
                count++;
            }
            i+=1;
        }
        return sum;
        
        
    }
    int minCostConnectPoints(vector<vector<int>>& points) {
        vector<pair<int, pair<int,int>>> graph;
        int n = points.size();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                int cost = (abs(points[i][0] - points[j][0]) 
                            + abs(points[i][1] - points[j][1]));
                graph.push_back({cost,{i,j}});
            }
        }
        return helper(graph,n);
    }
    // TC - O(N*LOG*EDGES)
    // SC - O(N)
};
