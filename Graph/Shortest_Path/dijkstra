//TIME COMPLEXITY-O(V*2) where V is the no of vertices 
#include<bits/stdc++.h>
#define vvi vector<vector<int>>
#define vvc vector<vector<char>> 
#define ll long long int
using namespace std;
int minVertex(vector<int> &distance, vector<int> &visited, int v)
{
    int mini =-1;
    for(int i=0;i<v;i++)
    {
       if((mini==-1 ||distance[i]<distance[mini]) && visited[i]==false)
       {
          mini =i;
       }
    }
    return mini;
}
void dijkstra(vector<vector<int>> &graph, int v)
{
    // lets craete a distance vector
    // and visited vector
    vector<int> visited(v,false);
    vector<int> distance(v,INT_MAX);
    distance[0]=0;
    for(int i=0;i<v-1;i++)
    {
        int mini =minVertex(distance,visited,v);
        visited[mini]=true;
        for(int j=0;j<v;j++)
        {
            if(!visited[j] && graph[mini][j]!=0)
            {
                int currdistance =distance[mini]+graph[mini][j];
                if(distance[j]>currdistance)
                {
                    distance[j]=currdistance;
                }
            }
        }
    }
    for(int i=0;i<v;i++)
    {
        cout<<i<<" "<<distance[i]<<endl;
    }

}
  int main()
  {
      int n,e;
      cin>>n>>e;
      vector<vector<int>> graph(n,vector<int>(n,0));
      for(int i=0;i<e;i++)
      {
         
              int x,y,dist;
              cin>>x>>y>>dist;
              graph[x][y]=dist;
              graph[y][x]=dist;          
          
      }
       dijkstra(graph,n);

      return 0;
  }
