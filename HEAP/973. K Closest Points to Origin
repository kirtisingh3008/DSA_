LINK - https://leetcode.com/problems/k-closest-points-to-origin/


class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        vector<vector<int>> ans;
        int n=points.size();
        vector<double> distance;
        for(auto &x: points)
        {
            double curr = sqrt(x[0]*x[0] + x[1]*x[1]);
            distance.push_back(curr);
        }
        priority_queue<double> heap;
        for(auto &i: distance)
        {
            heap.push(i);
            if(heap.size() > k)
            {
                heap.pop();
            }
        }
        double kth_small_points = heap.top();
        for(int i=0;i<n;i++)
        {
            if(distance[i] <= kth_small_points)
            {
                ans.push_back(points[i]);
            }
            
        }
        return ans;
        
    }
};

TC - O(N*LOG K)
SC - O(K)
