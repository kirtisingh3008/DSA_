LINK - https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/


class Solution {
public:
    // A NAIVE APPROACH
    // how about we maintain a vector where we keep all the values 
    // and sort it and return the kth element after sorting.
    int findKthNumber(int n, int m, int k) {
        vector<int> res(m*n);
        int cnt=0;
        int output =0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                res[cnt++]=i*j;
            }
        }
        sort(res.begin(),res.end());
        output=res[k-1];
        return output;
    }
    // THIS Gave me TLE as the the total time complexity be
    // the time complexity for making the array be O(M*N)
    // time complexity of sorting O((M*N )log(M*N))
    // SO in total time complexity be 0(M*N)+O((M*N)log(M*N))
    // SPACE COMPLEXITY BE -> 0(M*N) for storing it in the single array
};
