2413. Smallest Even Multiple


class Solution {
public:
    int smallestEvenMultiple(int n) {
        return (2*n)/__gcd(n,2);
    }
};


2414. Length of the Longest Alphabetical Continuous Substring

class Solution {
public:
    int longestContinuousSubstring(string s) {
      int ans=1;
        int n = s.size();
        int curr_length=1;
        for(int i=0;i<n;i++)
        {
            if( i>0)
            {
                if((s[i-1]+'a'+1 )+1 == (s[i]+'a'+1))
                {
                    curr_length++;
                }
                else
                {
                    ans = max(ans , curr_length);
                    curr_length =1;
                }
            }
            
        }
         ans = max(ans , curr_length);
        return ans;
    }
};


2415. Reverse Odd Levels of Binary Tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* l , TreeNode *r , int level)
    {
        if(level%2==0)
        {
            swap(l->val , r->val);
        }
        if(l->left == nullptr || r->right== nullptr)
            return;
        if(r->left == nullptr || l->right == nullptr)
        {
            return;
        }
        helper(l->left, r->right , level+1);
        helper(l->right , r->left , level+1);
    }
    TreeNode* reverseOddLevels(TreeNode* root) {
        if(root == nullptr || (root->left == nullptr && root->right == nullptr))
        {
            return root;
        }
        helper(root->left , root->right,0);
        return root;
       
    }
};
