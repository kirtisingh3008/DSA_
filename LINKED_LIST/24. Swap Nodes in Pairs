LINK - https://leetcode.com/problems/swap-nodes-in-pairs/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL || head->next==NULL)
       {
           return head;
       }
       ListNode *first = head;
        cout<<first->val<<endl;
       ListNode *second = head->next;
        cout<<second->val<<endl;
       ListNode *curr = swapPairs(head->next->next);
       first->next = curr;
        cout<<first->val<<endl;
       second->next = first;
        cout<<second->val<<endl;
       return second;
    }
};
TC - O(N)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==NULL)
       {
           return NULL;
       }
        if(head->next==NULL)
        {
            return head;
        }
        ListNode *curr =head;
        while(curr!=NULL && curr->next!=NULL)
        {
            int temp=curr->val;
            curr->val=curr->next->val;
            curr->next->val=temp;
            curr=curr->next->next;
        }
        return head;
    }
};
