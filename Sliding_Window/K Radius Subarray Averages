LINK - https://leetcode.com/problems/k-radius-subarray-averages/
class Solution {
public:
    vector<int> getAverages(vector<int>& nums, int k) {
        vector<int> ans;
        long long int sum =0;
        int n =nums.size();
        if(n<2*k+1)
        {
            for(int i=0;i<n;i++)
            {
                ans.push_back(-1);
            }
            return ans;
        }
        
        for(int i=0;i<k;i++)
        {
            ans.push_back(-1);
            sum+=nums[i];
        }
        if((2*k)+1 <= n)
        {
            int p = (2*k)+1;
            long long int sum=0;
            for(int i=0;i<p;i++)
            {
                sum+=nums[i];
            }
            
            ans.push_back(sum/p);
            for(int i=(2*k+1);i<n;i++)
            {
                sum += nums[i]-nums[i-(2*k+1)];
                //cout<<sum/p<<endl;
                ans.push_back(sum/p);
            }
        }
        if(ans.size()<n)
        {
            int diff = n-ans.size();
            for(int i=0;i<diff;i++)
            {
                ans.push_back(-1);
            }
        }
        return ans;
    }
};
TC -0(N)
SC-O(1)
