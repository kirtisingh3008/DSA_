LINK - https://leetcode.com/problems/range-sum-of-bst/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
APPROACH -1
class Solution {
public:
    // basic approach 
    // 1. store it in vector
    // 2. and sort
    // 3. sum it
    int rangeSumBST(TreeNode* root, int low, int high) {
        vector<int> a;
        if(root==NULL)
            return 0;
        queue<TreeNode*> q;
        q.push(root);
        while(q.empty()==false)
        {
            int size = q.size();
            for(int i=0;i<size;i++)
            {
                TreeNode *x = q.front();
                q.pop();
                a.push_back(x->val);
                if(x->left!=NULL)
                {
                    q.push(x->left);
                }
                if(x->right!=NULL)
                {
                    q.push(x->right);
                }
            }
        }
        int sum=0;
        for(int i=0;i<a.size();i++)
        {
            if(a[i]>=low && a[i] <=high)
            {
                sum+=a[i];
            }
        }
        return sum;
        
    }
    // TC - O(N)
    // SC - O(N)+O(N)--> O(N) 
};


APPROACH -2 (SPACE OPTIMIZATION)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum=0;
    int rangeSumBST(TreeNode* root, int low, int high) {
        helper(root, low, high);
        return sum;
    }
    void helper(TreeNode* root, int low , int high)
    {
        if(root==NULL)
            return ;
        if(root->val >=low && root->val <=high)
        {
            sum+=root->val;
        }
        helper(root->left,low,high);
        helper(root->right,low,high);
        
    }
};
TC - 0(N)
SC-O(1)
