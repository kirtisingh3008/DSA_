LINK - https://leetcode.com/problems/recover-binary-search-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
      TreeNode * prev;
      TreeNode * middle;
      TreeNode * last;
      TreeNode * first;
 void inorder(TreeNode* root)
 {
     if(root==NULL)
     {
         return;
     }
     inorder(root->left);
     if(prev!=NULL && root->val < prev->val)
     {
         if(first==NULL)
         {
             first = prev;
             middle = root;
         }
         else 
         {
             last = root;
         }
     }
     prev = root;
     inorder(root->right);
 }
    
public:
    void recoverTree(TreeNode* root) {
        prev = middle = last =NULL;
        prev = new TreeNode(INT_MIN);
        if(root==NULL)
            return;
        
        inorder(root);
        if(first!=NULL && last!=NULL)
            swap(first->val, last->val);
        else if(first!=NULL && middle!=NULL)
            swap(first->val,middle->val);
        
    }
};
