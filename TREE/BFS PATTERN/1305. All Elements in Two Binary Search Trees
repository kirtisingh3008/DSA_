LINK -  https://leetcode.com/problems/all-elements-in-two-binary-search-trees/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        
     vector<int> ans;
        // base case
        if( root1== NULL && root2==NULL)
            return ans;
        
        queue<TreeNode*> q;
        if(root1!=NULL)
        {
        q.push(root1);
        while(q.empty()==false)
        {
            TreeNode * node = q.front();
            q.pop();
            ans.push_back(node->val);
            if(node->left!=NULL)
            {
                q.push(node->left);
            }
            if(node->right!=NULL)
            {
                q.push(node->right);
            }
        }
        }
        if(root2!=NULL)
        {
        q.push(root2);
         while(q.empty()==false)
        {
            TreeNode * node = q.front();
             ans.push_back(node->val);
            q.pop();
            if(node->left!=NULL)
            {
                q.push(node->left);
            }
            if(node->right!=NULL)
            {
                q.push(node->right);
            }
        }
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};

TC - 0(N) + O(Number of nodes in tree1 + Number of nodes in tree2) Log (Number of nodes in tree1 + Number of nodes in tree2)
SC - O(max(tree with max nodes in any one level))

