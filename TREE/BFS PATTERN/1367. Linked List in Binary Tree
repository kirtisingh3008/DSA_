LINK -  https://leetcode.com/problems/linked-list-in-binary-tree/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helper(TreeNode * root, ListNode * head)
    {
        if(head!=NULL && root==NULL)
        {
            return false;
        }
        if(head==NULL)
        {
            return true;
        }
        if(root!=NULL && head!=NULL && root-> val != head->val)
        {
            return false;
        }
        return helper(root->left , head->next) || helper(root->right , head->next); 
    }
    bool isSubPath(ListNode* head, TreeNode* root) {
        if(root==NULL && head==NULL)
        {
            return true;
        }
        if((root!=NULL && head==NULL) || (root==NULL && head!=NULL))
        {
            return false;
        }
        queue<TreeNode*>q;
        q.push(root);
        while(q.empty()==false)
        {
            TreeNode * curr = q.front();
            q.pop();
            if(helper(curr,head)==true)
            {
                return true;
            }
            if(curr->left!=NULL)
            {
                  q.push(curr->left);
            }
            if(curr->right!=NULL)
            {
                q.push(curr->right);
            }
        }
        return false;
        
    }
};

