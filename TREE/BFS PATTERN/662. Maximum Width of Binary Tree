LINK - https://leetcode.com/problems/maximum-width-of-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        if(root->left==NULL && root->right==NULL)
        {
            return 1;
        }
        queue<pair<TreeNode*, int>> q;
        q.push({root,0});
        int ans =0;
        while(q.empty()==false)
        {
            int n=q.size();
            int max_m = INT_MIN;
            int min_m = INT_MAX;
            while(n--)
            {
                TreeNode *curr = q.front().first;
                int x = q.front().second;
                q.pop();
                max_m = max(max_m, x);
                min_m = min(min_m,x);
                if(curr->left!=NULL)
                {
                    q.push({curr->left,(long long)2*x+1});
                }
                if(curr->right!=NULL)
                {
                    q.push({curr->right,(long long)2*x+2});
                }
                
            }
            ans = max(ans , abs(max_m -min_m +1));
        }
        return ans;
    }
};

TC - O(N)
SC -O(N)
