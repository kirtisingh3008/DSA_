LINK - https://leetcode.com/problems/delete-node-in-a-bst/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)
            return NULL;
        //if left
        if(root->val < key)
        {
            root->right =deleteNode(root->right,key);
            return root;
        }
        else if(root->val==key)
        {
        // no child
            if(root->left==NULL && root->right==NULL)
            {
                
                delete root;
                return NULL;
                
            }
            // if only one
            else if(root->left==NULL && root->right!=NULL)
            {
                TreeNode *temp =root->right;
                delete root;
                return temp;
            }
            else if(root->right==NULL && root->left!=NULL)
            {
                TreeNode *temp =root->left;
                delete root;
                return temp;
            }
            // if both the child are there
            else 
            {
                // find minimum on the right and put it on left
                TreeNode * temp =root->right;
                while(temp->left!=NULL)
                {
                    temp=temp->left;
                }
                root->val =temp->val;
                root->right =deleteNode(root->right,temp->val);
                return root;
            }
        }
        else 
        {
            root->left =deleteNode(root->left,key);
            return root;
        }
        return root;
        
    }
};
