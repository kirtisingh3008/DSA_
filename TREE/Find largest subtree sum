LINK -https://www.geeksforgeeks.org/find-largest-subtree-sum-tree/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int helper(TreeNode* root , int &sum)
    {
        // hitting the base case;
        if(root==NULL)
            return 0;
        int left = helper(root->left,sum);
        int right =helper(root->right,sum);
        // if only maximum of left or right is greater or just the root is greater
        int curr_max = max(max(left,right)+root->val,root->val);
        int consider_full = max(curr_max,left+right+root->val);
        if(sum < consider_full)
        {
            sum =consider_full;
        }
        return sum;
    }
    int maxSumBST(TreeNode* root) {
          int value = INT_MIN;
        int sum =helper(root,value);
        return sum;
        
    }
};
TC - 0(N) // Will update it soon. why?
