/*************************************************************
 
    Following is the Binary Tree node structure:

    template <typename T>

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;
        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> printRightView(BinaryTreeNode<int>* root) {
    //  Write your code here.
    vector<int> ans;
    if(root==NULL )
    {
        return ans;
    }
    if(root->left ==NULL && root->right==NULL)
    {    ans.push_back(root->data);
         return ans;
    }
    queue<BinaryTreeNode <int>*> q;
    q.push(root);
    while(q.empty()==false)
    {
        int n=q.size();
        for(int i=0;i<n;i++)
        {
              BinaryTreeNode<int> *Node =q.front();
              q.pop();
             if(i==n-1)
            ans.push_back(Node->data);
            if(Node->left!=NULL)
            {
                q.push(Node->left);
            }
             if(Node->right!=NULL)
            {
                q.push(Node->right);
            }

        }
      
    }
    return ans;
}
