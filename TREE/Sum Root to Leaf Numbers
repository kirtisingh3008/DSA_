LINK -https://leetcode.com/problems/sum-root-to-leaf-numbers/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> ans;
    vector<vector<int>> res;
    void solve(TreeNode *root, vector<int> ans)
    {
        if(root==NULL)
          return ;
        if(root->left==NULL && root->right==NULL)
        {
            ans.push_back(root->val);
            res.push_back(ans);
            return;
        }
        ans.push_back(root->val);
        solve(root->left,ans);
        solve(root->right,ans);  
    }
    int total_sum(vector<vector<int>> res)
    {
        int sum=0;
        int n=res.size();
   
         for(int i=0;i<n;i++)
         {
             int psum=0;
             int m =res[i].size();
             for(int j=0;j<res[i].size();j++)
             {
                // cout<<res[i][j]<<endl;
                 int p1sum = res[i][j]*pow(10,((m-1)-j));
                 psum+=p1sum;
                 
             }
         //   cout<<"enter"<<endl;
           //  cout<<psum<<endl;
             sum+=psum;
         }
        return sum;
    }
    int sumNumbers(TreeNode* root) 
    {
        if(root==NULL)
            return 0;
        solve(root,ans);
        return total_sum(res);
    }
};
